
////////////////////////////////////////////////////////////////////////////////
// this is a file  for frida in typescript 
// 

////////////////////////////////////////////////////////////////////////////////
// c source code                  
{% for l in cCode %} 
// {{l}} {% endfor  %}

let jump16InstrMaxOffset=0x800000;

function checkArch(){
    if(Process.arch != 'arm'){
        throw "not arm arch, please check";
    }
}


function alignNum(n:number, align:number){
    return Math.floor((n+align-1)/align) *align
}

function typedArrayToBuffer(array: Uint8Array): ArrayBuffer {
    return array.buffer.slice(array.byteOffset, array.byteLength + array.byteOffset) as ArrayBuffer
}


function putImmToMovRegInstrThumb(u:number, addr:NativePointer){
    let b0 = (u>>0x00) &0xf
    let b1 = (u>>0x04) &0xf
    let b2 = (u>>0x08) &0x7
    let b3 = (u>>0x0b) &0x1
    let b4 = (u>>0x0c) &0xf
    let ob = addr.readU32() >>>0
    ob &= 0x8f00fbf0
    ob |= (b0) << 0x10
    ob |= (b1) << 0x14
    ob |= (b2) << 0x1c
    ob |= (b3) << 0x0a
    ob |= (b4) << 0x00
    ob >>>=0
    addr.writeU32(ob)
}

function getJumpOffset(src:NativePointer, tag:NativePointer):number{
    let srcInt = src.toInt32();
    let tagInt = tag.toInt32();
    return tagInt-srcInt;
}


function getSymbolAddress(symbol:string):NativePointer{
    let address = Module.getExportByName(null, symbol);
    return address;
}

export const allocatedBuffer:NativePointer[] =[];

export var makeCode = ( externalSymbols?: Map<string, NativePointer>| undefined )=> {

    checkArch();


    // allocate a buffer for store bs
    const bs = new Uint8Array([ {% for n in bs %} {{n}}, {% endfor  %} ]);
    const bsLen = {{hexBsLenString}};
    let allocLen = alignNum(bsLen, Process.pageSize);
    const buffer = Memory.alloc( allocLen);
    Memory.protect(buffer, allocLen, 'rwx');
    buffer.writeByteArray(typedArrayToBuffer(bs));

    // hot link 
    // write got area
    {% for k,v in gotInfo["symbols"].items() %} 
    try{
        var resolved = false;
        if(!resolved){
            if(externalSymbols != undefined){
                const address  = externalSymbols.get("{{k}}");
                if(address !=null) {
                    buffer.add({{ gotInfo["offset"] }} + {{v['offset']}} ).writePointer(address);
                    resolved = true;
                }
            }
        }
        if(!resolved){
            buffer.add({{ gotInfo["offset"] }} + {{v['offset']}} ).writePointer(Module.getExportByName(null, "{{k}}"));
        }
    }
    catch(_e){
        let e:Error= _e; 
        let result = e.message;
        console.log("get address for {{k}} failed with error " +  `${result}`);
    }
    {% endfor  %}

    allocatedBuffer.push(buffer); // always store the alloced buffer ptr, avoid it will be free when hook code try to call it 
    return {
        buffer : buffer, 
        bufferLength : bsLen,
        symbols: new Map<string, NativePointer>([
    {% for k,v in symInfos.items() %} 
       [  "{{k  }}", buffer.add({{v["offset"]}}) ], 
    {% endfor %}
        ]),
    } ;

}


type HookOption = {
    pos: NativePointer;
    fun: string;
};

type HookInfo ={
    buffer:NativePointer,
    pos:NativePointer, 
};

export var hookCode = ( hookOptions:HookOption[], externalSymbols?: Map<string, NativePointer>| undefined, forceFarJump?:boolean|undefined )=> {

    let code = makeCode(externalSymbols);
    let hooks:HookInfo[]=[];
    forceFarJump = forceFarJump != undefined ? forceFarJump : false;
    hookOptions.forEach(h=>{
        // add hooks
        console.log(JSON.stringify(h));
        if ((h.pos.toUInt32()&0x1)!=0x1) {
            throw "hook pos is not correct, it is not a valid Thumb address ";
        };
        let allocLen = Process.pageSize;
        // add pumded code for hooks;
        let buffer;

        let nearjump;

        if(forceFarJump){
            buffer = Memory.alloc(allocLen);
            nearjump = false;
        }
        else{
            try{
                buffer = Memory.alloc(allocLen, {near:h.pos,maxDistance:jump16InstrMaxOffset});
                nearjump=true;
            }
            catch(_e){
                buffer = Memory.alloc(allocLen);
                nearjump = false;
            }
        }
        if(nearjump){
            console.log('use long jump ')
        }
        allocatedBuffer.push(buffer); // always store the alloced buffer ptr, avoid it will be free when hook code try to call it 
        hooks.push({
                buffer:buffer,
                pos:h.pos,
            });
        Memory.protect(buffer, allocLen, 'rwx');
        {
            const bs = new Uint8Array([ {% for n in hookInfo['INST'] %} {{n}}, {% endfor  %} ]);
            buffer.writeByteArray(typedArrayToBuffer(bs));
        }
        {
            let funaddr = code.symbols.get(h.fun);
            if(funaddr!=null){ buffer.add( {{ hookInfo['funOffset'] }} ).writePointer(funaddr); }
            else{ throw `can not get address of fun "${h.fun}"` }
        }
        if(nearjump){
            {
                buffer.add(  {{ hookInfo['backAddressOffset'] }} ).writePointer(h.pos.add(4));
            }

            {
                buffer.add(  {{ hookInfo['originCodeOffset'] }} ).writeU32( h.pos.sub(1).readU32());
            }
            {
                // put jump code at original addr
                const addr = h.pos;
                Memory.protect(addr.sub(1), 4, 'rwx');
                let writer = new ThumbWriter(addr.sub(1))
                writer.putBImm(buffer);
                writer.flush()
                Memory.protect(addr.sub(1), 4, 'r-x');
            }
            
        }
        else {
            if ((h.pos.toUInt32()&0x3)!=0x1) {
                throw "hook pos is not correct, it is not a valid Thumb address, and use long jump";
            }

            {
                buffer.add(  {{ hookInfo['backAddressOffset'] }} ).writePointer(h.pos.add(8));
            }
            {
                buffer.add(  {{ hookInfo['originCodeOffset'] }} ).add(0).writeU32( h.pos.sub(1).add(0).readU32());
                buffer.add(  {{ hookInfo['originCodeOffset'] }} ).add(4).writeU32( h.pos.sub(1).add(4).readU32());
            }
            {
                // put jump code at original addr
                const addr = h.pos;
                Memory.protect(addr.sub(1), 8, 'rwx');
                const bs = new Uint8Array([ {% for n in hookInfo['longJumpINST'] %} {{n}}, {% endfor  %} ]);
                addr.sub(1).add( 0x00 ).writeByteArray(typedArrayToBuffer(bs));
                addr.sub(1).add( {{hookInfo['longJumpOffset'] }} ).writePointer(buffer.add(1));
                Memory.protect(addr.sub(1), 8, 'r-x');
            }
        }
    });
    return {code:code, hooks:hooks};
}

        
